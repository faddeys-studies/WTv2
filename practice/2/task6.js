
class Universe {
    constructor() { this.map = {}}

    incCell(row, col) {
        row = this.map[row] = (this.map[row] || {});
        row[col] = (row[col] || 0) + 1;
    }

    setCell(row, col, value) {
        row = this.map[row] = (this.map[row] || {});
        row[col] = value;
    }

    getCell(row, col) {
        row = this.map[row];
        if (row === undefined) return 0;
        return row[col] | 0;
    }

    iterCells() {
        let points = [];
        for(let rowId of Object.keys(this.map)) {
            for (let colId of Object.keys(this.map[rowId])) {
                if (this.map[rowId][colId] > 0)
                    points.push([rowId|0, colId|0]);
            }
        }
        return points;
    }
}

function lifeCounter(matrix, numSteps) {
    // printMat(matrix);
	let universe = new Universe();
	matrix.forEach(
	    (row, rowId) => row.forEach(
	        (cell, colId) => cell ? universe.setCell(rowId, colId, 1) : null
        )
    );

	for(let i = 0; i < numSteps; i++) {
	    let sumsUniverse = new Universe();
	    for(let [r, c] of universe.iterCells()) {
	        sumsUniverse.incCell(r-1, c);
	        sumsUniverse.incCell(r+1, c);
	        sumsUniverse.incCell(r-1, c-1);
	        sumsUniverse.incCell(r,   c-1);
	        sumsUniverse.incCell(r+1, c-1);
	        sumsUniverse.incCell(r-1, c+1);
	        sumsUniverse.incCell(r,   c+1);
	        sumsUniverse.incCell(r+1, c+1);
        }
        let nextUniverse = new Universe();
        for(let [r, c] of sumsUniverse.iterCells()) {
            let nNeigbors = sumsUniverse.getCell(r, c);
            if (nNeigbors == 3) nextUniverse.setCell(r, c, 1);
            else if (nNeigbors == 2 && universe.getCell(r, c) == 1)
                nextUniverse.setCell(r, c, 1);
        }
        universe = nextUniverse;

        // let field = renderUniverse(universe);
        // printMat(field);

    }
    return universe.iterCells().reduce((sum, [r, c]) => sum+1, 0);
}

// DEBUG HELPERS

function renderUniverse(universe) {
    let [minR, maxR, minC, maxC] = universe.iterCells().reduce(
        (limits, [r, c]) => [
            Math.min(limits[0], r),
            Math.max(limits[1], r),
            Math.min(limits[2], c),
            Math.max(limits[3], c)
        ],
        [Number.MAX_VALUE, -Number.MAX_VALUE, Number.MAX_VALUE, -Number.MAX_VALUE]
    );
    let W = maxC - minC + 1, H = maxR - minR + 1;

    let field = new Array(H).fill(null).map(() => new Array(W).fill(0));
    for (let [r, c] of universe.iterCells()) {
        field[r-minR][c-minC] = 1;
    }
    return field;
}


function printMat(matrix) {
    var fieldStr = '';
    for (let row of matrix) {
        fieldStr += (row+'\n');
    }
    console.log('FIELD');
    console.log(fieldStr);
}


function assertEqual(actualVal, expectedVal, message) {
	if(expectedVal === actualVal) {
		console.log("+", message);
	}
	else {
		console.error("-", message, "(Expected:", expectedVal, "; Actual:", actualVal, ")");
	}
}

function runTask6() {
    assertEqual(lifeCounter([
                   [0, 1, 0, 0, 0, 0, 0],
                   [0, 0, 1, 0, 0, 0, 0],
                   [1, 1, 1, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 1],
                   [0, 0, 0, 0, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 0],
                   [1, 1, 1, 0, 0, 0, 0]], 4),
                15,
                "Case #0");
    // return;
    assertEqual(lifeCounter([
                   [0, 1, 0, 0, 0, 0, 0],
                   [0, 0, 1, 0, 0, 0, 0],
                   [1, 1, 1, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 1],
                   [0, 0, 0, 0, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 0],
                   [1, 1, 1, 0, 0, 0, 0]], 15),
                14,
                "Case #1");
	assertEqual(lifeCounter([
                   [0, 1, 0],
                   [0, 0, 1],
                   [1, 1, 1]], 50),
				5,
                "Case #2");

	assertEqual(lifeCounter([
                   [1, 1, 0, 1, 1],
                   [1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0],
                   [1, 1, 0, 1, 1],
                   [1, 1, 0, 1, 1]], 100),
				16,
                "Case #3");

    //Extra
	assertEqual(lifeCounter([
                   [0, 0, 0, 0, 0, 0, 1, 0],
                   [1, 1, 0, 0, 0, 0, 0, 0],
                   [0, 1, 0, 0, 0, 1, 1, 1]], 129),
				2,
                "Case #4");
	assertEqual(lifeCounter([
                   [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
                   [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
                   [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
                   [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0],
                   [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
                   [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
                   [1, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 1, 1, 1, 0, 0, 0, 1, 1, 1, 0, 0]], 100),
				56,
                "Case #5");
	assertEqual(lifeCounter([
	               [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                   [1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 1],
                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                   [0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
                   [0, 0, 1, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 1, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                   [0, 0, 1, 1, 1, 1, 0, 0, 0, 0, 1, 1, 1, 1, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 0, 0, 0, 0]], 42),
				36,
                "Case #6");
	assertEqual(lifeCounter([
	               [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 1, 0, 0, 0, 1, 1, 0, 1, 1],
                   [1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1]], 100),
				33,
                "Case #7");
	assertEqual(lifeCounter([
                   [0, 1, 0],
                   [0, 0, 1],
                   [1, 1, 1]], 999),
				5,
                "Case #8");
	assertEqual(lifeCounter([
                   [0, 1, 0, 0, 0, 0, 1, 0],
                   [1, 0, 0, 0, 0, 0, 0, 1],
                   [1, 1, 1, 0, 0, 1, 1, 1]],
                            999),
				10,
                "Case #9");
	assertEqual(lifeCounter([
	               [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                   [1, 1, 1, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 0, 0, 1, 1, 0, 1, 1]], 100),
				52,
                "Case #10");
	assertEqual(lifeCounter([
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
                   [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
                   [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 10),
				22,
                "Case #11");
	assertEqual(lifeCounter([
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
                   [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 1, 1, 0, 1, 1, 1, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
                   [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
                   [0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]], 20),
				0,
                "Case #12");
	assertEqual(lifeCounter([
                   [0, 0, 0, 0, 0, 0, 0, 0],
                   [1, 1, 1, 0, 0, 1, 1, 1],
                   [0, 0, 0, 0, 0, 1, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 0],
                   [0, 0, 0, 0, 0, 0, 0, 0],
                   [1, 1, 1, 0, 0, 0, 0, 0],
                   [0, 0, 0, 0, 0, 1, 1, 1],
                   [0, 0, 0, 0, 0, 1, 0, 0],
                   [0, 0, 0, 0, 0, 0, 1, 0],
                   [1, 1, 1, 0, 0, 0, 0, 0]], 100),
				3,
                "Case #13");
	assertEqual(lifeCounter([
                   [0, 1, 1, 1, 1, 1, 1, 1, 0, 0],
                   [0, 1, 1, 0, 0, 0, 0, 1, 1, 1],
                   [0, 0, 1, 0, 0, 0, 0, 0, 1, 1],
                   [1, 0, 0, 1, 0, 0, 1, 1, 1, 1],
                   [1, 0, 1, 0, 0, 1, 0, 1, 1, 0],
                   [0, 1, 1, 0, 0, 1, 0, 1, 1, 1],
                   [1, 0, 1, 0, 1, 1, 1, 0, 1, 1],
                   [0, 1, 1, 1, 0, 0, 1, 1, 1, 1],
                   [0, 0, 1, 0, 1, 1, 0, 0, 0, 1],
                   [1, 0, 1, 0, 0, 0, 1, 1, 1, 1]], 50),
				74,
                "Case #14");
	assertEqual(lifeCounter([
                   [1, 1, 1, 1, 0, 1, 1, 0, 1, 1],
                   [0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
                   [0, 1, 0, 1, 1, 0, 1, 1, 1, 1],
                   [0, 0, 1, 1, 1, 0, 1, 0, 0, 1],
                   [0, 1, 1, 1, 0, 1, 1, 1, 0, 0],
                   [1, 1, 0, 1, 0, 1, 0, 1, 1, 0],
                   [1, 0, 1, 0, 0, 0, 0, 0, 1, 1],
                   [1, 1, 1, 0, 1, 0, 1, 1, 0, 1],
                   [1, 0, 0, 0, 0, 0, 0, 0, 0, 1],
                   [0, 0, 0, 1, 1, 0, 1, 0, 1, 1]], 50),
				79,
                "Case #15");
	assertEqual(lifeCounter([
                   [0, 0, 1, 1, 1, 1, 0, 1, 0, 0],
                   [1, 1, 0, 0, 1, 0, 1, 1, 1, 0],
                   [0, 1, 1, 1, 1, 1, 0, 0, 1, 0],
                   [0, 0, 0, 1, 0, 1, 0, 1, 0, 1],
                   [1, 1, 0, 1, 0, 0, 0, 0, 1, 0],
                   [1, 1, 0, 0, 0, 0, 1, 1, 1, 1],
                   [1, 0, 0, 0, 0, 1, 1, 1, 0, 0],
                   [0, 0, 1, 1, 1, 1, 1, 1, 0, 0],
                   [1, 0, 0, 1, 0, 0, 1, 1, 1, 1],
                   [1, 0, 0, 0, 0, 0, 1, 0, 1, 0]], 50),
				81,
                "Case #16");
	assertEqual(lifeCounter([
                   [1, 0, 0, 0, 1, 0, 0, 0, 1, 0],
                   [1, 1, 0, 0, 1, 0, 1, 0, 1, 0],
                   [1, 0, 0, 0, 0, 1, 1, 1, 1, 1],
                   [0, 0, 1, 0, 1, 0, 1, 0, 1, 0],
                   [0, 1, 1, 1, 1, 1, 0, 1, 1, 0],
                   [0, 1, 0, 1, 0, 0, 0, 0, 0, 1],
                   [0, 1, 0, 0, 1, 0, 0, 0, 0, 0],
                   [1, 1, 0, 1, 0, 0, 0, 0, 1, 1],
                   [0, 1, 1, 1, 1, 1, 0, 0, 0, 1],
                   [1, 1, 0, 0, 0, 1, 1, 1, 1, 0]], 50),
				18,
                "Case #17");

	console.log("Done!");
}

runTask6();
